#denumerator of ratio
den <- (target_dist(X)*dlnorm(Xcand,meanlog=log(X),sdlog=props))
#a<-min(c(1,(target_dist(Y)*dlnorm(X,meanlog=Y,sdlog=props)/(target_dist(X)*dlnorm(Y,meanlog=X,sdlog=props)))))
a<-min(1,num/den)
#check condition if T accept the candidate point
if (u <=a){
vecX[i]<-Xcand
}
#reject candidate stay in the current point
else{
vecX[i]<-X
#rejection count
Rej<-Rej+1
}
}
#draw plot
if(draw_plot==T){
plot(vN,vecX,pch=19,cex=0.3,col="black",xlab="t",ylab="X(t)",
main="Plot of sample using LN",ylim=c(1,20),type="l")
abline(h=0)
abline(h=1,col="red")
abline(h=5,col="red")
grid(30,30,col="lightgray")
}
#return output of sample,rejections
if(output==T){
return(list("sample"=vecX,"rejections"=Rej))
}
}
set.seed(123456)
#create a 5000 sample from our proposal
f<-f.MCMC.MH(5000,rlnorm(1,0,1),1)
load("chemical.RData")
chemical
chem<-load("chemical.RData")
chem
head(chem)
load("chemical.RData")
chemical
load("~/computational statistics/lab_4/chemical.RData")
chemical
load("~/computational statistics/lab_4/chemical.RData")
chemical
chem <- get(load('chemical.Rdata'))
chem
head(chem)
load("~/computational statistics/lab_4/chemical.RData")
chemical.RData
chemical
chem <- get(load('chemical.Rdata'))
if(is.data.frame(chem)){
names(chem)
}
chem <- get(load('chemical.Rdata'))
if(is.data.frame(chem)){
names(chem)
}
chem
chem <- get(load("chemical.Rdata"))
if(is.data.frame(chem)){
names(chem)
}
chem <- get(load("chemical.Rdata"))
if(is.data.frame(chem)){
names(chem)
}
chem
chem <- load.RData("chemical.Rdata")
chem
load"chemical.Rdata")
load("chemical.Rdata")
chemical
X
Y
plot(X,Y)
plot(X,Y)
grid(30,30)
plot(X,Y,col="blue")
grid(30,30)
plot(X,Y,col="blue",pch=19)
grid(30,30)
mod1<-lm(Y~X)
plot(X,Y,col="blue",pch=19)
lines(X,mod1)
mod1
mod1$coefficients[]
mod1$coefficients[1]+mod1$coefficients[2]
mod1$coefficients[1]+mod1$coefficients[2]*X
mod1<-lm(Y~X)
plot(X,Y,col="blue",pch=19)
lines(X,mod1$coefficients[1]+mod1$coefficients[2]*X)
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
grid(30,30)
mod2
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=mod2$coefficients[1]+mod2$coefficients[2]*X+mod2$coefficients[3]*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
lines(X,Y_lm2)
grid(30,30)
lm2
Y_lm2
lm2
mod2
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=mod2$coefficients[1]+mod2$coefficients[2]*X+mod2$coefficients[3]*X*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
lines(X,Y_lm2)
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=mod2$coefficients[1]+mod2$coefficients[2]*X+mod2$coefficients[3]*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
lines(X,Y_lm2)
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=mod2$coefficients[1]+mod2$coefficients[2]*X+mod2$coefficients[3]*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
curve(X^2)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=mod2$coefficients[1]+mod2$coefficients[2]*X+mod2$coefficients[3]*X
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
lines(X,Y_lm2)
grid(30,30)
range(Y_lm2)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=predict(mod2)
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm)
lines(X,Y_lm2)
grid(30,30)
#set seed
set.seed(123456)
#this is our target function
target_dist<-function(x){
return(x^5*exp(-x))
}
#initialize rejection counts
Rej<-0
#metropolis-hastings using lognormal
#input(n sample,starting point,sd given,T to return output ,T to return plot)
f.MCMC.MH<-function(nstep,X0,props,output=T,draw_plot=T){
#initialize the first point
X0<-X0
#vector to use in the plot
vN<-1:nstep
#initialize our sample vector
vecX<-rep(X0,nstep);
#for loop for the algorithm
for(i in 2:nstep){
#take the previous point in our sample
X<-vecX[i-1]
#create candidate poiint from log-normal
Xcand<-rlnorm(1,meanlog=log(X),sdlog=props)
#random point
u<-runif(1)
#numerator of ratio
num <- (target_dist(Xcand)*dlnorm(X,meanlog=log(Xcand),sdlog=props))
#denumerator of ratio
den <- (target_dist(X)*dlnorm(Xcand,meanlog=log(X),sdlog=props))
#a<-min(c(1,(target_dist(Y)*dlnorm(X,meanlog=Y,sdlog=props)/(target_dist(X)*dlnorm(Y,meanlog=X,sdlog=props)))))
a<-min(1,num/den)
#check condition if T accept the candidate point
if (u <=a){
vecX[i]<-Xcand
}
#reject candidate stay in the current point
else{
vecX[i]<-X
#rejection count
Rej<-Rej+1
}
}
#draw plot
if(draw_plot==T){
plot(vN,vecX,pch=19,cex=0.3,col="black",xlab="t",ylab="X(t)",
main="Plot of sample using LN",ylim=c(1,20),type="l")
abline(h=0)
abline(h=1.96,col="red")
abline(h=155,col="red")
grid(30,30,col="lightgray")
}
#return output of sample,rejections
if(output==T){
return(list("sample"=vecX,"rejections"=Rej))
}
}
set.seed(123456)
#create a 5000 sample from our proposal
f<-f.MCMC.MH(5000,rlnorm(1,0,1),1)
#set seed
set.seed(123456)
#this is our target function
target_dist<-function(x){
return(x^5*exp(-x))
}
#initialize rejection counts
Rej<-0
#metropolis-hastings using lognormal
#input(n sample,starting point,sd given,T to return output ,T to return plot)
f.MCMC.MH<-function(nstep,X0,props,output=T,draw_plot=T){
#initialize the first point
X0<-X0
#vector to use in the plot
vN<-1:nstep
#initialize our sample vector
vecX<-rep(X0,nstep);
#for loop for the algorithm
for(i in 2:nstep){
#take the previous point in our sample
X<-vecX[i-1]
#create candidate poiint from log-normal
Xcand<-rlnorm(1,meanlog=log(X),sdlog=props)
#random point
u<-runif(1)
#numerator of ratio
num <- (target_dist(Xcand)*dlnorm(X,meanlog=log(Xcand),sdlog=props))
#denumerator of ratio
den <- (target_dist(X)*dlnorm(Xcand,meanlog=log(X),sdlog=props))
#a<-min(c(1,(target_dist(Y)*dlnorm(X,meanlog=Y,sdlog=props)/(target_dist(X)*dlnorm(Y,meanlog=X,sdlog=props)))))
a<-min(1,num/den)
#check condition if T accept the candidate point
if (u <=a){
vecX[i]<-Xcand
}
#reject candidate stay in the current point
else{
vecX[i]<-X
#rejection count
Rej<-Rej+1
}
}
#draw plot
if(draw_plot==T){
plot(vN,vecX,pch=19,cex=0.3,col="black",xlab="t",ylab="X(t)",
main="Plot of sample using LN",ylim=c(1,20),type="l")
abline(h=0)
abline(h=1.96,col="red")
abline(h=15,col="red")
grid(30,30,col="lightgray")
}
#return output of sample,rejections
if(output==T){
return(list("sample"=vecX,"rejections"=Rej))
}
}
set.seed(123456)
#create a 5000 sample from our proposal
f<-f.MCMC.MH(5000,rlnorm(1,0,1),1)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=predict(mod2)
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm,col="red")
lines(X,Y_lm2,col="green")
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=predict(mod2)
plot(X,Y,col="blue",pch=19)
lines(X,Y_lm,col="red")
lines(X,Y_lm2,col="black")
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=predict(mod2)
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red")
lines(X,Y_lm2,col="blue")
grid(30,30)
mod1<-lm(Y~X)
mod2<-lm(Y~poly(X,2))
Y_lm=mod1$coefficients[1]+mod1$coefficients[2]*X
Y_lm2=predict(mod2)
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
grid(30,30)
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend
grid(30,30,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend("topleft" pch=12, col=c("red", "blue"), c("Linear Model", "2nd Order Polynomial Model"), cex=.8)
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend("topleft" ,pch=12, col=c("red", "blue"), c("Linear Model", "2nd Order Polynomial Model"))
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend("topleft" ,pch=12, col=c("red", "blue"), c("Linear Model", "Polynomial Model"))
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#third order polynomial model
mod3<-lm(poly(Y~X,3))
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#third order polynomial model
mod3<-lm(Y~poly(X,3))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model2
Y_lm2=predict(mod2)
#preds for poly model3
Y_lm3=predict(mod3)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend("topleft" ,pch=12, col=c("red", "blue"), c("Linear Model", "Polynomial Model"))
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#third order polynomial model
mod3<-lm(Y~poly(X,3))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model2
Y_lm2=predict(mod2)
#preds for poly model3
Y_lm3=predict(mod3)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
lines(X,Y_lm3,col="green",lwd=2)
legend("topleft" ,pch=12, col=c("red", "blue"), c("Linear Model", "Polynomial Model"))
grid(25,25,col="lightgray")
#linear model
mod1<-lm(Y~X)
#second order polynomial model
mod2<-lm(Y~poly(X,2))
#preds for linear model
Y_lm=predict(mod1)
#preds for poly model2
Y_lm2=predict(mod2)
#plot
plot(X,Y,col="black",pch=19)
lines(X,Y_lm,col="red",lwd=2)
lines(X,Y_lm2,col="blue",lwd=2)
legend("topleft" ,pch=12, col=c("red", "blue"), c("Linear Model", "Polynomial Model"))
grid(25,25,col="lightgray")
par(mfrow=c(1,2))
#histogram density of the sample
hist(f2$sample,prob=T,col="lightblue",main="Histogram/Density of LN sample")
lines(density(f2$sample),col="blue",lwd=2)
grid(25,25,col="lightgray")
# #target density
x=seq(0,20,0.01)
y=target_dist(x)
plot(x,y,type="l",main="Density of target function",
col="darkslateblue",lwd=2)
abline(v=5,col="orange")
grid(25,25,col = "lightgray")
par(mfrow=c(1,2))
hist(f$sample,prob=T,col="lightblue",main="Histogram/Density of LN sample")
lines(density(f$sample),col="blue",lwd=2)
grid(25,25,col="lightgray")
#target
x=seq(0,20,0.01)
y=target_dist(x)
plot(x,y,type="l",main="Density of target function",
col="darkslateblue",lwd=2)
abline(v=5,col="orange")
grid(25,25,col="lightgray")
f.MCMC.Gibbs<-function(nstep,X0,vmean,mVar){
vN<-1:nstep
d<-length(vmean)
mX<-matrix(0,nrow=nstep,ncol=d)
mX[1,]<-X0
for (i in 2:nstep){
X<-mX[i-1,]
Y<-rep(0,d)
Y[1]<-rnorm(1,mean=vmean[1]+(mVar[1,-1]%*%solve(mVar[-1,-1]))%*%(X[2:d]-vmean[-1]),sd=sqrt(mVar[1,1]-mVar[1,-1]%*%solve(mVar[-1,-1])%*%mVar[-1,1]))
for (j in 2:(d-1)){
Y[j]<-rnorm(1,mean=vmean[j]+(mVar[j,-j]%*%solve(mVar[-j,-j]))%*%(c(Y[1:(j-1)],X[(j+1):d])-vmean[-j]),sd=sqrt(mVar[j,j]-mVar[j,-j]%*%solve(mVar[-j,-j])%*%mVar[-j,j]))
}
Y[d]<-rnorm(1,mean=vmean[d]+(mVar[d,-d]%*%solve(mVar[-d,-d]))%*%(Y[1:(d-1)]-vmean[-d]),sd=sqrt(mVar[d,d]-mVar[d,-d]%*%solve(mVar[-d,-d])%*%mVar[-d,d]))
mX[i,]<-Y
}
mX
}
vmean<-0
nstep<-200
X0<-0
mX<-f.MCMC.Gibbs(nstep,X0,vmean,mVar)
plot(mX[-1,1],mX[-1,2],pch=19,cex=0.5,col="black",
xlab="X1",ylab="X2",main="",cex.lab=1.7,cex.axis=1.5,
xlim=c(min(mX[-1,1]-0.5),max(mX[-1,1]+0.5)),
ylim=c(min(mX[,2]-0.5),max(mX[-1,2]+0.5)))
vmean<-c(1,2)
mVar<-rbind(c(1,0.5),c(0.5,1))
nstep<-200
X0<-c(10,10)
mX<-f.MCMC.Gibbs(nstep,X0,vmean,mVar)
plot(mX[-1,1],mX[-1,2],pch=19,cex=0.5,col="black",xlab="X1",ylab="X2",main="",cex.lab=1.7,cex.axis=1.5,xlim=c(min(mX[-1,1]-0.5),max(mX[-1,1]+0.5)),ylim=c(min(mX[,2]-0.5),max(mX[-1,2]+0.5)))
par(mfrow=c(2,1))
plot(2:nstep,mX[-1,1],pch=19,cex=0.3,col="black",xlab="t",ylab="X1",cex.axis=1.5,cex.lab=1.7)
abline(h=vmean[1])
plot(2:nstep,mX[-1,2],pch=19,cex=0.3,col="black",xlab="t",ylab="X2",cex.axis=1.5,cex.lab=1.7)
abline(h=vmean[2])
mX
setwd("~/Visualization/lab_5")
